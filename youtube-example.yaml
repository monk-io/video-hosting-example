namespace: youtube-example

frontend-site:
  defines: netlify/site
  name: monk-youtube-example-dku
  force_ssl: false
  secret_ref: default-netlify-pat
  permitted-secrets:
    default-netlify-pat: true
  services:
    data:
      protocol: custom

redis-subscription:
  defines: redis-cloud/subscription
  name: monk-youtube-example-redis
  subscription_type: essentials
  size: 30
  provider: AWS
  region: us-east-1
  redis_flex: false
  availability: No replication
  support_data_persistence: false
  support_instant_and_daily_backups: false
  support_replication: false
  support_clustering: false
  support_ssl: false
  account_key_secret: default-redis-cloud-account-key
  user_key_secret: default-redis-cloud-user-key
  services:
    subscription:
      protocol: custom
  permitted-secrets:
    default-redis-cloud-account-key: true
    default-redis-cloud-user-key: true

redis:
  defines: redis-cloud/database
  name: monk-youtube-example-redis-db
  subscription_id: <- connection-target("redis-cloud-subscription") entity-state get-member("id")
  subscription_type: <- connection-target("redis-cloud-subscription") entity-state get-member("type")
  account_key_secret: default-redis-cloud-account-key
  user_key_secret: default-redis-cloud-user-key
  password_secret: default-redis-cloud-db-password
  services:
    db:
      protocol: custom
  depends:
    wait-for:
      runnables:
        - youtube-example/redis-subscription
      timeout: 60
  connections:
    redis-cloud-subscription:
      target: youtube-example/redis-subscription
      service: subscription
  permitted-secrets:
    default-redis-cloud-account-key: true
    default-redis-cloud-user-key: true
    default-redis-cloud-db-password: true

backend:
  defines: runnable
  permitted-secrets:
    default-redis-cloud-db-password: true
  metadata:
    name: backend
    description: "Go-based backend API for a YouTube-like video platform. Handles user, video, and job management, connects to MongoDB, Redis, and MinIO for data, queue, and storage. Exposes HTTP API for frontend and worker interaction."
  containers:
    main:
      image: "backend"
      image-tag: "latest"
  services:
    http:
      description: HTTP API service for frontend and worker communication.
      protocol: tcp
      port: 8080
      publish: true
      host-port: 8080
      container: main
  connections:
    mongodb:
      target: youtube-example/mongodb
      service: mongodb
    redis:
      target: youtube-example/redis
      service: db
    minio:
      target: youtube-example/minio
      service: api
    frontend:
      target: youtube-example/frontend-site
      service: data
  depends:
    wait-for:
      runnables:
        - youtube-example/mongodb
        - youtube-example/redis
        - youtube-example/minio
      timeout: 60
  variables:
    port:
      type: int
      env: PORT
      description: Port for the backend HTTP server to listen on.
      value: 8080
    mongodb-hostname:
      type: string
      value: <- connection-hostname("mongodb")
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for database access.
      value: <- `mongodb://${global-mongo-init-username}:${global-mongo-init-password}@${mongodb-hostname}:27017/${global-mongo-init-database}?authSource=admin`
    redis-username:
      type: string
      value: <- connection-target("redis") entity-state get-member("username")
    redis-password:
      type: string
      value: <- secret("default-redis-cloud-db-password")
    redis-uri:
      type: string
      env: REDIS_URI
      description: Redis connection URI for job queue and caching.
      value: <- `redis://${redis-username}:${redis-password}@` connection-target("redis") entity-state get-member("publicEndpoint") concat-all
    minio-endpoint:
      type: string
      env: MINIO_ENDPOINT
      description: MinIO server endpoint for object storage.
      value: <- connection-hostname("minio") ":" connection-port("minio") concat-all
    minio-access-key:
      type: string
      env: MINIO_ACCESS_KEY
      description: Access key for MinIO object storage.
      value: <- $global-minio-access-key default("minioadmin")
    minio-secret-key:
      type: string
      env: MINIO_SECRET_KEY
      description: Secret key for MinIO object storage.
      value: <- $global-minio-secret-key default("minioadmin")
    minio-use-ssl:
      type: bool
      env: MINIO_USE_SSL
      description: Whether to use SSL for MinIO connection.
      value: <- $global-minio-use-ssl default("false")
    frontend-url:
      type: string
      env: FRONTEND_URL
      description: URL of the frontend application for CORS and redirects.
      value: <- "https://" domain-name "," connection-target("frontend") entity-state get-member("url") concat-all
      # value: "*"
    jwt-secret:
      type: string
      env: JWT_SECRET
      description: Secret key for signing JWT tokens.
      value: your_jwt_secret_key_here
    cors-origins:
      type: string
      env: CORS_ORIGINS
      description: Allowed origins for CORS.
      value: <- "https://" domain-name concat-all
    log-level:
      type: string
      env: LOG_LEVEL
      description: Logging level for the backend application.
      value: info
    node-env:
      type: string
      env: NODE_ENV
      description: "Node environment (for compatibility, not used by Go)."
      value: development
    go-env:
      type: string
      env: GO_ENV
      description: Go environment (development/production).
      value: development
  permitted-secrets:
    default-redis-cloud-db-password: true

worker:
  defines: runnable
  metadata:
    name: worker
    description: "Go-based video processing worker. Consumes jobs from Redis, processes videos using FFmpeg, stores results in MinIO, and updates MongoDB. Multiple instances can be run for scalability."
  permitted-secrets:
    default-redis-cloud-db-password: true
  containers:
    main:
      image: "worker"
      image-tag: "latest"
  services: {}
  connections:
    mongodb:
      target: youtube-example/mongodb
      service: mongodb
    redis:
      target: youtube-example/redis
      service: db
    minio:
      target: youtube-example/minio
      service: api
  depends:
    wait-for:
      runnables:
        - youtube-example/mongodb
        - youtube-example/redis
        - youtube-example/minio
      timeout: 60
  variables:
    worker-id:
      type: string
      env: WORKER_ID
      description: Unique identifier for the worker instance.
      value: worker1
    mongodb-hostname:
      type: string
      value: <- connection-hostname("mongodb")
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for database access.
      value: <- `mongodb://${global-mongo-init-username}:${global-mongo-init-password}@${mongodb-hostname}:27017/${global-mongo-init-database}?authSource=admin`
    redis-username:
      type: string
      value: <- connection-target("redis") entity-state get-member("username")
    redis-password:
      type: string
      value: <- secret("default-redis-cloud-db-password")
    redis-uri:
      type: string
      env: REDIS_URI
      description: Redis connection URI for job queue and caching.
      value: <- `redis://${redis-username}:${redis-password}@` connection-target("redis") entity-state get-member("publicEndpoint") concat-all
    minio-endpoint:
      type: string
      env: MINIO_ENDPOINT
      description: MinIO server endpoint for object storage.
      value: <- connection-hostname("minio") ":" connection-port("minio") concat-all
    minio-access-key:
      type: string
      env: MINIO_ACCESS_KEY
      description: Access key for MinIO object storage.
      value: <- $global-minio-access-key default("minioadmin")
    minio-secret-key:
      type: string
      env: MINIO_SECRET_KEY
      description: Secret key for MinIO object storage.
      value: <- $global-minio-secret-key default("minioadmin")
    minio-use-ssl:
      type: bool
      env: MINIO_USE_SSL
      description: Whether to use SSL for MinIO connection.
      value: <- $global-minio-use-ssl default("false")
    minio-bucket-name:
      type: string
      env: MINIO_BUCKET_NAME
      description: Bucket name in MinIO for storing videos.
      value: videos
    worker-count:
      type: int
      env: WORKER_COUNT
      description: Number of worker instances to run.
      value: 2
    worker-concurrency:
      type: int
      env: WORKER_CONCURRENCY
      description: Number of concurrent jobs a worker can process.
      value: 2
    max-file-size:
      type: string
      env: MAX_FILE_SIZE
      description: Maximum allowed file size for uploads.
      value: 1GB
    supported-formats:
      type: string
      env: SUPPORTED_FORMATS
      description: Comma-separated list of supported video formats.
      value: "mp4,avi,mov,wmv,flv,webm"
    output-formats:
      type: string
      env: OUTPUT_FORMATS
      description: Comma-separated list of output video resolutions.
      value: "480p,720p,1080p"
    log-level:
      type: string
      env: LOG_LEVEL
      description: Logging level for the worker application.
      value: info
    node-env:
      type: string
      env: NODE_ENV
      description: "Node environment (for compatibility, not used by Go)."
      value: development
    go-env:
      type: string
      env: GO_ENV
      description: Go environment (development/production).
      value: development
  permitted-secrets:
    default-redis-cloud-db-password: true

mongodb:
  defines: runnable
  inherits: mongodb/mongodb
  variables:
    mongo-image:
      type: string
      env: mongo-image
      description: The tag of the MongoDB Docker image to use.
      value: latest
    mongodb-image:
      type: string
      env: mongodb-image
      description: The tag of the MongoDB Docker image to use (alternative variable).
      value: latest
    mongo-init-password:
      type: string
      env: MONGO_INITDB_ROOT_PASSWORD
      description: The password for the root MongoDB user.
      value: <- $global-mongo-init-password default("password")
    mongo-init-database:
      type: string
      env: MONGO_INITDB_DATABASE
      description: The name of the initial database to create.
      value: <- $global-mongo-init-database default("mongo")
    mongo-init-username:
      type: string
      env: MONGO_INITDB_ROOT_USERNAME
      description: The username for the root MongoDB user.
      value: <- $global-mongo-init-username default("mongo")

minio:
  defines: runnable
  inherits: minio/minio-server
  variables:
    admin-password:
      type: string
      env: MINIO_ROOT_PASSWORD
      description: The root password for the MinIO admin user.
      value: <- $global-minio-secret-key default("minioadmin")
    api-port:
      type: int
      env: api-port
      description: Port for the MinIO S3-compatible API service.
      value: 9000
    admin-username:
      type: string
      env: MINIO_ROOT_USER
      description: The root username for the MinIO admin user.
      value: <- $global-minio-access-key default("minioadmin")
    console-port:
      type: int
      env: MINIO_CONSOLE_PORT
      description: Port for the MinIO web console.
      value: 9001
  services:
    api:
      publish: true

proxy:
  defines: runnable
  inherits: nginx/node-proxy
  connections:
    backend:
      target: youtube-example/backend
      service: http
  depends:
    wait-for:
      runnables:
        - youtube-example/backend
      timeout: 60

frontend:
  defines: runnable
  inherits: netlify/deploy
  containers:
    deploy:
      paths:
        - "blobs://frontend:/home/node/app"
  variables:
    deploy-dir: build
    site-id: <- connection-target("site") entity-state get-member("id")
    pre-deploy: |
      npm install
      npm run build
      echo '/* /index.html 200' >> build/_redirects
      
    react-app-api-url:
      type: string
      env: REACT_APP_API_URL
      description: URL of the backend API for the frontend to communicate with.
      value: <- "https://" connection-domain-name("backend-api") concat-all
    react-app-minio-url:
      type: string
      env: REACT_APP_MINIO_URL
      description: URL of the MinIO server for accessing video assets.
      value: <- "https://" connection-domain-name("minio-api") ":9000" concat-all
    node-env:
      type: string
      env: NODE_ENV
      description: Node environment for the frontend build.
      value: development
  connections:
    site:
      target: youtube-example/frontend-site
      service: data
    backend-api:
      target: youtube-example/proxy
      service: nginx
    minio-api:
      target: youtube-example/minio
      service: api
  depends:
    wait-for:
      runnables:
        - youtube-example/frontend-site
        - youtube-example/proxy
        - youtube-example/minio
      timeout: 60

stack:
  defines: group
  variables:
    global-mongodb-uri:
      type: string
      description: MongoDB connection URI for database access.
      value: "mongodb://admin:password@mongodb:27017/youtube?authSource=admin"
    global-redis-uri:
      type: string
      description: Redis connection URI for job queue and caching.
      value: "redis://redis:6379"
    global-minio-endpoint:
      type: string
      description: MinIO server endpoint for object storage.
      value: "minio:9000"
    global-minio-access-key:
      type: string
      description: Access key for MinIO object storage.
      value: minioadmin
    global-minio-secret-key:
      type: string
      description: Secret key for MinIO object storage.
      value: minioadmin
    global-minio-use-ssl:
      type: bool
      description: Whether to use SSL for MinIO connection.
      value: false
    global-admin-username:
      type: string
      description: Access key for MinIO object storage.
      value: 3qfmssogqi
    global-admin-password:
      type: string
      description: Secret key for MinIO object storage.
      value: yuYaf3IAf-3DhQ_Z
    global-mongo-init-password:
      type: string
      description: MongoDB connection URI for database access.
      value: Twnp9jS.miC-1dfz
    global-mongo-init-username:
      type: string
      description: MongoDB connection URI for database access.
      value: admin
    global-mongo-init-database:
      type: string
      description: MongoDB connection URI for database access.
      value: youtube
  members:
    - youtube-example/backend
    - youtube-example/worker
    - youtube-example/mongodb
    - youtube-example/minio
    - youtube-example/proxy
    - youtube-example/frontend-site
    - youtube-example/frontend
    - youtube-example/redis-subscription
    - youtube-example/redis
