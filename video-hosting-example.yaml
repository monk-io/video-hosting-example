namespace: video-hosting-example

frontend-site:
  defines: netlify/site
  name: monk-video-hosting-example-dlu1
  force_ssl: false
  secret_ref: default-netlify-pat
  permitted-secrets:
    default-netlify-pat: true
  services:
    data:
      protocol: custom

redis:
  defines: runnable
  inherits: redis/redis
  variables:
    redis_empty_password:
      type: string
      env: ALLOW_EMPTY_PASSWORD
      description: Allows Redis to start with an empty password.
      value: yes
    redis_port:
      type: int
      env: REDIS_PORT
      description: Port on which Redis listens.
      value: 6379
    redis_instance_name:
      type: string
      env: REDIS_INSTANCE_NAME
      description: Name of the Redis instance.
      value: master
    redis_disable_commands:
      type: string
      env: REDIS_DISABLE_COMMANDS
      description: Commands to disable in Redis.
      value: "FLUSHDB,FLUSHALL,CONFIG"
    redis_io_threads_do_reads:
      type: string
      env: REDIS_IO_THREADS_DO_READS
      description: Enable Redis IO threads for reads.
      value: yes
    redis_io_thread:
      type: string
      env: REDIS_IO_THREADS
      description: Number of Redis IO threads.
      value: 1

mongodb-project:
  defines: mongodb-atlas/project
  name: video-hosting-example
  organization: <- secret("default-mongodb-org")
  secret_ref: default-mongodb-token
  services:
    data:
      protocol: custom
  permitted-secrets:
    default-mongodb-token: true
    default-mongodb-org: true

mongodb-user:
  defines: mongodb-atlas/user
  name: video-hosting-example-user
  role: atlasAdmin
  secret_ref: default-mongodb-token
  password_secret_ref: mongodb-password
  project_id: <- connection-target("project") entity-state get-member("id")
  services:
    data:
      protocol: custom
  depends:
    wait-for:
      runnables:
        - video-hosting-example/mongodb-project
      timeout: 60
  connections:
    project:
      target: video-hosting-example/mongodb-project
      service: data
  permitted-secrets:
    default-mongodb-token: true
    default-mongodb-org: true
    mongodb-password: true

mongodb-database:
  defines: mongodb-atlas/cluster
  name: video-hosting-example-cluster
  project_id: <- connection-target("project") entity-state get-member("id")
  provider: AWS
  region: US_EAST_1
  instance_size: M0
  node_count: 3
  secret_ref: default-mongodb-token
  allow_ips:
    - 0.0.0.0/0
  services:
    data:
      protocol: custom
  depends:
    wait-for:
      runnables:
        - video-hosting-example/mongodb-project
      timeout: 60
  connections:
    project:
      target: video-hosting-example/mongodb-project
      service: data
  checks:
    readiness:
      period: 10
      initialDelay: 2
      attempts: 30
  permitted-secrets:
    default-mongodb-token: true
    default-mongodb-org: true

backend:
  defines: runnable
  permitted-secrets:
    default-redis-cloud-db-password: true
    mongodb-password: true
  metadata:
    name: backend
    description: "Go-based backend API for a YouTube-like video platform. Handles user, video, and job management, connects to MongoDB, Redis, and MinIO for data, queue, and storage. Exposes HTTP API for frontend and worker interaction."
  containers:
    main:
      image: "backend"
      image-tag: "latest"
      # entrypoint: sleep 36000
  services:
    http:
      description: HTTP API service for frontend and worker communication.
      protocol: tcp
      port: 8080
      publish: true
      host-port: 8080
      container: main
  connections:
    mongodb:
      target: video-hosting-example/mongodb-database
      service: data
    redis:
      target: video-hosting-example/redis
      service: redis-svc
    minio:
      target: video-hosting-example/minio
      service: api
    frontend:
      target: video-hosting-example/frontend-site
      service: data
    user:
      target: video-hosting-example/mongodb-user
      service: data
  depends:
    wait-for:
      runnables:
        - video-hosting-example/mongodb-project
        - video-hosting-example/mongodb-user
        - video-hosting-example/mongodb-database
        - video-hosting-example/redis
        - video-hosting-example/minio
      timeout: 60
  variables:
    port:
      type: int
      env: PORT
      description: Port for the backend HTTP server to listen on.
      value: 8080
    mongodb-username:
      env: MONGODB_USERNAME
      value: <- connection-target("user") entity get-member("name")
      type: string
    mongodb-password:
      env: MONGODB_PASSWORD
      value: <- secret("mongodb-password")
      type: string
    mongodb-connection-string:
      env: MONGODB_CONNECTION_STRING
      value: <- connection-target("mongodb") entity-state get-member("connection_srv")
      type: string
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for database access.
      value: <- $mongodb-connection-string replace("mongodb+srv://", `mongodb+srv://${mongodb-username}:${mongodb-password}@`)
    redis-uri:
      type: string
      env: REDIS_URI
      description: Redis connection URI for job queue and caching.
      value: <- `redis://` connection-hostname("redis") ":" connection-port("redis") concat-all
    minio-endpoint:
      type: string
      env: MINIO_ENDPOINT
      description: MinIO server endpoint for object storage.
      value: <- connection-hostname("minio") ":" connection-port("minio") concat-all
    minio-access-key:
      type: string
      env: MINIO_ACCESS_KEY
      description: Access key for MinIO object storage.
      value: <- $global-minio-access-key default("minioadmin")
    minio-secret-key:
      type: string
      env: MINIO_SECRET_KEY
      description: Secret key for MinIO object storage.
      value: <- $global-minio-secret-key default("minioadmin")
    minio-use-ssl:
      type: bool
      env: MINIO_USE_SSL
      description: Whether to use SSL for MinIO connection.
      value: <- $global-minio-use-ssl default("false")
    frontend-url:
      type: string
      env: FRONTEND_URL
      description: URL of the frontend application for CORS and redirects.
      value: <- "https://" domain-name "," connection-target("frontend") entity-state get-member("url") concat-all
      # value: "*"
    jwt-secret:
      type: string
      env: JWT_SECRET
      description: Secret key for signing JWT tokens.
      value: your_jwt_secret_key_here
    cors-origins:
      type: string
      env: CORS_ORIGINS
      description: Allowed origins for CORS.
      value: <- "https://" domain-name concat-all
    log-level:
      type: string
      env: LOG_LEVEL
      description: Logging level for the backend application.
      value: info
    node-env:
      type: string
      env: NODE_ENV
      description: "Node environment (for compatibility, not used by Go)."
      value: development
    go-env:
      type: string
      env: GO_ENV
      description: Go environment (development/production).
      value: development

worker:
  defines: runnable
  metadata:
    name: worker
    description: "Go-based video processing worker. Consumes jobs from Redis, processes videos using FFmpeg, stores results in MinIO, and updates MongoDB. Multiple instances can be run for scalability."
  permitted-secrets:
    default-redis-cloud-db-password: true
    mongodb-password: true
  containers:
    main:
      image: "worker"
      image-tag: "latest"
  services: {}
  connections:
    mongodb:
      target: video-hosting-example/mongodb-database
      service: data
    redis:
      target: video-hosting-example/redis
      service: redis-svc
    minio:
      target: video-hosting-example/minio
      service: api
    user:
      target: video-hosting-example/mongodb-user
      service: data
  depends:
    wait-for:
      runnables:
        - video-hosting-example/mongodb-project
        - video-hosting-example/mongodb-user
        - video-hosting-example/mongodb-database
        - video-hosting-example/redis
        - video-hosting-example/minio
      timeout: 60
  variables:
    worker-id:
      type: string
      env: WORKER_ID
      description: Unique identifier for the worker instance.
      value: worker1
    mongodb-username:
      env: MONGODB_USERNAME
      value: <- connection-target("user") entity get-member("name")
      type: string
    mongodb-password:
      env: MONGODB_PASSWORD
      value: <- secret("mongodb-password")
      type: string
    mongodb-connection-string:
      env: MONGODB_CONNECTION_STRING
      value: <- connection-target("mongodb") entity-state get-member("connection_srv")
      type: string
    mongodb-uri:
      type: string
      env: MONGODB_URI
      description: MongoDB connection URI for database access.
      value: <- $mongodb-connection-string replace("mongodb+srv://", `mongodb+srv://${mongodb-username}:${mongodb-password}@`)
    redis-uri:
      type: string
      env: REDIS_URI
      description: Redis connection URI for job queue and caching.
      value: <- `redis://` connection-hostname("redis") ":" connection-port("redis") concat-all
    minio-endpoint:
      type: string
      env: MINIO_ENDPOINT
      description: MinIO server endpoint for object storage.
      value: <- connection-hostname("minio") ":" connection-port("minio") concat-all
    minio-access-key:
      type: string
      env: MINIO_ACCESS_KEY
      description: Access key for MinIO object storage.
      value: <- $global-minio-access-key default("minioadmin")
    minio-secret-key:
      type: string
      env: MINIO_SECRET_KEY
      description: Secret key for MinIO object storage.
      value: <- $global-minio-secret-key default("minioadmin")
    minio-use-ssl:
      type: bool
      env: MINIO_USE_SSL
      description: Whether to use SSL for MinIO connection.
      value: <- $global-minio-use-ssl default("false")
    minio-bucket-name:
      type: string
      env: MINIO_BUCKET_NAME
      description: Bucket name in MinIO for storing videos.
      value: videos
    worker-count:
      type: int
      env: WORKER_COUNT
      description: Number of worker instances to run.
      value: 2
    worker-concurrency:
      type: int
      env: WORKER_CONCURRENCY
      description: Number of concurrent jobs a worker can process.
      value: 2
    max-file-size:
      type: string
      env: MAX_FILE_SIZE
      description: Maximum allowed file size for uploads.
      value: 1GB
    supported-formats:
      type: string
      env: SUPPORTED_FORMATS
      description: Comma-separated list of supported video formats.
      value: "mp4,avi,mov,wmv,flv,webm"
    output-formats:
      type: string
      env: OUTPUT_FORMATS
      description: Comma-separated list of output video resolutions.
      value: "480p,720p,1080p"
    log-level:
      type: string
      env: LOG_LEVEL
      description: Logging level for the worker application.
      value: info
    node-env:
      type: string
      env: NODE_ENV
      description: "Node environment (for compatibility, not used by Go)."
      value: development
    go-env:
      type: string
      env: GO_ENV
      description: Go environment (development/production).
      value: development

minio:
  defines: runnable
  inherits: minio/minio-server
  variables:
    admin-password:
      type: string
      env: MINIO_ROOT_PASSWORD
      description: The root password for the MinIO admin user.
      value: <- $global-minio-secret-key default("minioadmin")
    api-port:
      type: int
      env: api-port
      description: Port for the MinIO S3-compatible API service.
      value: 9000
    admin-username:
      type: string
      env: MINIO_ROOT_USER
      description: The root username for the MinIO admin user.
      value: <- $global-minio-access-key default("minioadmin")
    console-port:
      type: int
      env: MINIO_CONSOLE_PORT
      description: Port for the MinIO web console.
      value: 9001
  services:
    api:
      publish: true

proxy:
  defines: runnable
  inherits: nginx/node-proxy
  connections:
    backend:
      target: video-hosting-example/backend
      service: http
  depends:
    wait-for:
      runnables:
        - video-hosting-example/backend
      timeout: 60

frontend:
  defines: runnable
  inherits: local/netlify/deploy
  containers:
    deploy:
      paths:
        - "blobs://frontend:/home/node/app"
  variables:
    deploy-dir: build
    site-id: <- connection-target("site") entity-state get-member("id")
    pre-deploy: |
      npm install
      npm run build
      echo '/* /index.html 200' >> build/_redirects

    react-app-api-url:
      type: string
      env: REACT_APP_API_URL
      description: URL of the backend API for the frontend to communicate with.
      value: <- "https://" connection-domain-name("backend-api") concat-all
    react-app-minio-url:
      type: string
      env: REACT_APP_MINIO_URL
      description: URL of the MinIO server for accessing video assets.
      value: <- "http://" connection-domain-name("minio-api") ":9000" concat-all
    node-env:
      type: string
      env: NODE_ENV
      description: Node environment for the frontend build.
      value: development
  connections:
    site:
      target: video-hosting-example/frontend-site
      service: data
    backend-api:
      target: video-hosting-example/proxy
      service: nginx
    minio-api:
      target: video-hosting-example/minio
      service: api
  depends:
    wait-for:
      runnables:
        - video-hosting-example/frontend-site
        - video-hosting-example/proxy
        - video-hosting-example/minio
      timeout: 60

stack:
  defines: group
  variables:
    global-mongodb-uri:
      type: string
      description: MongoDB connection URI for database access.
      value: "mongodb://admin:password@mongodb:27017/youtube?authSource=admin"
    global-redis-uri:
      type: string
      description: Redis connection URI for job queue and caching.
      value: "redis://redis:6379"
    global-minio-endpoint:
      type: string
      description: MinIO server endpoint for object storage.
      value: "minio:9000"
    global-minio-access-key:
      type: string
      description: Access key for MinIO object storage.
      value: minioadmin
    global-minio-secret-key:
      type: string
      description: Secret key for MinIO object storage.
      value: minioadmin
    global-minio-use-ssl:
      type: bool
      description: Whether to use SSL for MinIO connection.
      value: false
    global-admin-username:
      type: string
      description: Access key for MinIO object storage.
      value: 3qfmssogqi
    global-admin-password:
      type: string
      description: Secret key for MinIO object storage.
      value: yuYaf3IAf-3DhQ_Z
    global-mongo-init-password:
      type: string
      description: MongoDB connection URI for database access.
      value: Twnp9jS.miC-1dfz
    global-mongo-init-username:
      type: string
      description: MongoDB connection URI for database access.
      value: admin
    global-mongo-init-database:
      type: string
      description: MongoDB connection URI for database access.
      value: youtube
  members:
    - video-hosting-example/backend
    - video-hosting-example/worker
    - video-hosting-example/mongodb-project
    - video-hosting-example/mongodb-user
    - video-hosting-example/mongodb-database
    - video-hosting-example/minio
    - video-hosting-example/proxy
    - video-hosting-example/frontend-site
    - video-hosting-example/frontend
    - video-hosting-example/redis
